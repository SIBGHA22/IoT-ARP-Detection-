import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, f1_score
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from imblearn.over_sampling import SMOTE

# Simulate loading a dataset (replace with actual path)
# Example placeholder for IoTID20 or CICIoT2023
def load_dataset():
    # Simulated dataset structure
    np.random.seed(42)
    size = 1000
    data = pd.DataFrame({
        'src_mac': np.random.randint(0, 2, size),
        'dst_mac': np.random.randint(0, 2, size),
        'protocol': np.random.choice([1, 6, 17], size),
        'packet_size': np.random.randint(60, 1500, size),
        'ip_mac_match': np.random.randint(0, 2, size),
        'tcp_flag': np.random.randint(0, 2, size),
        'class': np.random.choice(['benign', 'arp_spoof'], size)
    })
    return data

# Load data
data = load_dataset()

# Encode target
le = LabelEncoder()
data['class'] = le.fit_transform(data['class'])  # benign=0, arp_spoof=1

# Feature-target split
X = data.drop('class', axis=1)
y = data['class']

# Scaling
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# SMOTE balancing
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_scaled, y)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42)

# SVM training with hyperparameter tuning
svm = SVC(probability=True)
svm_params = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}
svm_grid = GridSearchCV(svm, svm_params, cv=5, scoring='f1')
svm_grid.fit(X_train, y_train)

# KNN training with hyperparameter tuning
knn = KNeighborsClassifier()
knn_params = {'n_neighbors': [3, 5, 7]}
knn_grid = GridSearchCV(knn, knn_params, cv=5, scoring='f1')
knn_grid.fit(X_train, y_train)
# Evaluate models
svm_pred = svm_grid.predict(X_test)
knn_pred = knn_grid.predict(X_test)

svm_f1 = f1_score(y_test, svm_pred)
knn_f1 = f1_score(y_test, knn_pred)